package jvm.bytecode;

/**
 *  现代JVM执行Java代码的时候，通常都会将解释执行与编译执行二者结合起来进行的。
 *  所谓解释执行，就是通过即时编辑器（JIT:Just in time）将字节码转换为本地机器码来执行，现代JVM会根据代码热点来生成相应的本地机器码。
 *
 *  基于栈的指令集与基于寄存器的指令集之间的关系：
 *  1. JVM执行指令所采取的是基于栈的指令集。
 *  2. 基于栈的指令集主要的操作有入栈与出栈两种。
 *  3. 基于栈的指令集的优点是在可以在不同平台之间移植，而基于寄存器的指令集与硬件架构紧密相连，无法做到移植。
 *  4. 基于栈的指令集的缺点在于完成相同的操作，指令数量要比基于寄存器的指令集要多，基于栈的指令集是在内存中完成操作的，
 *  而基于寄存器的指令集是直接由CPU来执行的，它是在高速缓冲区中进行执行的，速度要快很多。虽然虚拟机可以采用一些优化手段，但总体来说，基于栈的指令集的执行速度要慢一些。
 *
 *  eg.
 *  基于栈的指令集来做 2-1
 *  1.iconst2 -> 将2压入栈顶
 *  2.iconst1 -> 将1压入栈顶
 *  3.isub ->将栈的最上面2个元素弹栈，进行减法算出1，再将1压入栈顶
 *  4.istore_x ->将1存到局部变量表第x个slot位置。
 *
 *
 *  基于寄存器的指令集 2-1
 *  mov 2 到寄存器
 *  寄存器中的2拿出来-1，再存到寄存器中
 *  只需要2步
 */
public class MyTest7 {
    public int calculate() {
        int a = 1;
        int b = 2;
        int c = 3;
        int d = 4;

        return (a + b - c) * d;
    }
}
